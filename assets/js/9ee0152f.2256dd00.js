"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4958],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),i=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=i(r),f=a,_=u["".concat(l,".").concat(f)]||u[f]||p[f]||s;return r?n.createElement(_,o(o({ref:t},d),{},{components:r})):n.createElement(_,o({ref:t},d))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var i=2;i<s;i++)o[i]=r[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3258:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return i}});var n=r(3117),a=(r(7294),r(3905));const s={},o="start_prank",c={unversionedId:"cairo-1/testing/cheatcodes-reference/start_prank",id:"cairo-1/testing/cheatcodes-reference/start_prank",title:"start_prank",description:"Changes a caller address returned by getcalleraddress() for the targeted contract until the prank is stopped",source:"@site/docs/cairo-1/06-testing/cheatcodes-reference/start_prank.md",sourceDirName:"cairo-1/06-testing/cheatcodes-reference",slug:"/cairo-1/testing/cheatcodes-reference/start_prank",permalink:"/protostar/docs/cairo-1/testing/cheatcodes-reference/start_prank",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/cairo-1/06-testing/cheatcodes-reference/start_prank.md",tags:[],version:"current",frontMatter:{},sidebar:"cairo1",previous:{title:"prepare",permalink:"/protostar/docs/cairo-1/testing/cheatcodes-reference/prepare"},next:{title:"start_roll",permalink:"/protostar/docs/cairo-1/testing/cheatcodes-reference/start_roll"}},l={},i=[],d={toc:i};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"start_prank"},(0,a.kt)("inlineCode",{parentName:"h1"},"start_prank")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo"},"fn start_prank(caller_address: felt252, target_contract_address: felt252) -> Result::<(), felt252> nopanic;\n")),(0,a.kt)("p",null,"Changes a caller address returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"get_caller_address()")," for the targeted contract until the prank is stopped\nwith ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes-reference/stop_prank"},"stop_prank"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"caller_address")," address that will start being returned by ",(0,a.kt)("inlineCode",{parentName:"li"},"get_caller_address()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"target_contract_address")," address for which ",(0,a.kt)("inlineCode",{parentName:"li"},"get_caller_address()")," result will be replaced")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Example"',title:'"Example"'},"#[contract]\nmod MyContract {\n    use starknet::get_caller_address;\n    use starknet::ContractAddress;\n    use starknet::ContractAddressIntoFelt252;\n    use option::Option;\n    use traits::Into;\n\n    struct Storage {\n        stored_value: felt252\n    }\n\n    #[external]\n    fn will_be_pranked() {\n        let caller_address: ContractAddress = get_caller_address();\n        if (caller_address.into() == 123) {\n            stored_value::write(100);\n        } else {\n            stored_value::write(50);\n        }\n    }\n    \n    #[view]\n    fn get_stored_value() -> felt252 {\n        stored_value::read()\n    }\n}\n\n#[test]\nfn test_start_prank() {\n    invoke(deployed_contract_address, 'will_be_pranked', @ArrayTrait::new()).unwrap();\n    let return_data = call(deployed_contract_address, 'get_stored_value', @ArrayTrait::new()).unwrap();\n    // Standard value is set\n    assert(*return_data.at(0_u32) == 50, 'check call result');\n    \n    // Pranked the address\n    start_prank(123, deployed_contract_address).unwrap();\n    \n    invoke(deployed_contract_address, 'will_be_pranked', @ArrayTrait::new()).unwrap();\n    let return_data = call(deployed_contract_address, 'get_stored_value', @ArrayTrait::new()).unwrap();\n    // Special value (100) is set\n    assert(*return_data.at(0_u32) == 100, 'check call result');\n}\n")))}p.isMDXComponent=!0}}]);