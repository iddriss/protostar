"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[331],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),p=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=p(t.components);return r.createElement(l.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),d=p(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||c[f]||i;return n?r.createElement(m,o(o({ref:e},u),{},{components:n})):r.createElement(m,o({ref:e},u))}));function f(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6446:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_label:"Testing"},o="Running tests with Cairo 1",s={unversionedId:"tutorials/cairo-1-support/testing",id:"tutorials/cairo-1-support/testing",title:"Running tests with Cairo 1",description:"This functionality is in the alpha stage, expect rapid iteration",source:"@site/docs/tutorials/08-cairo-1-support/04-testing.md",sourceDirName:"tutorials/08-cairo-1-support",slug:"/tutorials/cairo-1-support/testing",permalink:"/protostar/docs/tutorials/cairo-1-support/testing",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/08-cairo-1-support/04-testing.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Testing"},sidebar:"tutorials",previous:{title:"Understanding protostar.toml",permalink:"/protostar/docs/tutorials/cairo-1-support/protostar-toml"},next:{title:"Cheatcodes",permalink:"/protostar/docs/tutorials/cairo-1-support/cheatcodes/"}},l={},p=[{value:"Writing your first test",id:"writing-your-first-test",level:2},{value:"Running the tests",id:"running-the-tests",level:2},{value:"Caveats",id:"caveats",level:2},{value:"1. Test collecting",id:"1-test-collecting",level:3},{value:"2. Test state",id:"2-test-state",level:3},{value:"3. Test function type",id:"3-test-function-type",level:3}],u={toc:p};function c(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"running-tests-with-cairo-1"},"Running tests with Cairo 1"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This functionality is in the alpha stage, expect rapid iteration")),(0,a.kt)("h2",{id:"writing-your-first-test"},"Writing your first test"),(0,a.kt)("p",null,"To make a test function, you need to mark the function with a decorator ",(0,a.kt)("inlineCode",{parentName:"p"},"#[test]")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#[test]\nfn test_bool_operators() {\n    assert(1 == 1);\n}\n")),(0,a.kt)("p",null,"To write a test that fails, you will need to use ",(0,a.kt)("inlineCode",{parentName:"p"},"panic"),", here's how you do it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"use array::ArrayTrait;\n\n// Single value in the panic payload\n#[test]\nfn test_panic_single_value() {\n    let mut data = array_new::<felt>();\n    array_append::<felt>(ref data, 21);\n    panic(data)\n}\n\n// Multiple values in the panic payload\n#[test]\nfn test_panic_multiple_values() {\n    let mut data = array_new::();\n    array_append::(ref data, 101);\n    array_append::(ref data, 102);\n    array_append::(ref data, 103);\n    panic(data)\n}\n")),(0,a.kt)("h2",{id:"running-the-tests"},"Running the tests"),(0,a.kt)("p",null,"To run cairo 1 tests, there is a special command called ",(0,a.kt)("inlineCode",{parentName:"p"},"test-cairo1"),".\nIt is a sibling command to the ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," command, it will collect all the tests in the given directory/module, run them,\nand print out a summary."),(0,a.kt)("p",null,"Tests are run on Cairo VM, so no Starknet syscalls are available from the test code."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cli-reference#test-cairo1"},"command reference")," for more details on usage."),(0,a.kt)("h2",{id:"caveats"},"Caveats"),(0,a.kt)("h3",{id:"1-test-collecting"},"1. Test collecting"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"test-cairo1")," will collect all tests ending with ",(0,a.kt)("inlineCode",{parentName:"p"},".cairo")," since there's no distinction between cairo 0 and cairo 1 files\nin terms of extension right now."),(0,a.kt)("p",null,"That means that you will either have to specify a regex to match your test names (\nsee ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cli-reference#test-cairo1"},"command reference"),"), or keep them in a separate directory to avoid syntax\nerrors."),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"test_")," file prefix or ",(0,a.kt)("inlineCode",{parentName:"p"},"_test")," postfix is required as well, to mark the files as test suites."),(0,a.kt)("h3",{id:"2-test-state"},"2. Test state"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"__setup__")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"<test_name>_setup")," from the previous version are not supported for now."),(0,a.kt)("h3",{id:"3-test-function-type"},"3. Test function type"),(0,a.kt)("p",null,"A test function must not return any values, be panickable, and not have any arguments for correct test result assessment"),(0,a.kt)("p",null,"In case the last statement in the function returns a value, you can add a line with a ",(0,a.kt)("inlineCode",{parentName:"p"},";")," in order to avoid returning\nany values from the test function."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fn foo() -> felt {\n    1\n}\n\n// Valid\n#[test]\nfn valid_test() {\n    assert(1 == 1); // Assertion makes function panickable\n    foo(); // Last statement does not return a value now from the test function\n}\n\n// Invalid (not panickable and also last statement returns a value from the test function)\n#[test]\nfn invalid_test() {\n    foo()\n}\n")),(0,a.kt)("p",null,"If you fail to comply with those rules, the test function will not pass the type check, and test collecting will fail."))}c.isMDXComponent=!0}}]);