"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5086],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(r),f=a,m=u["".concat(i,".").concat(f)]||u[f]||d[f]||o;return r?n.createElement(m,c(c({ref:t},s),{},{components:r})):n.createElement(m,c({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=u;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,c[1]=p;for(var l=2;l<o;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1832:function(e,t,r){r.r(t),r.d(t,{assets:function(){return i},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return l}});var n=r(3117),a=(r(7294),r(3905));const o={},c="prepare",p={unversionedId:"legacy/testing/cheatcodes/prepare",id:"legacy/testing/cheatcodes/prepare",title:"prepare",description:"Prepares contract for deployment given DeclaredContract and constructor_calldata. The cheatcode is useful when you want to know contract address before deploying it to affect constructor with a targeted cheatcode. Example:",source:"@site/docs/legacy/07-testing/02-cheatcodes/prepare.md",sourceDirName:"legacy/07-testing/02-cheatcodes",slug:"/legacy/testing/cheatcodes/prepare",permalink:"/protostar/docs/legacy/testing/cheatcodes/prepare",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/legacy/07-testing/02-cheatcodes/prepare.md",tags:[],version:"current",frontMatter:{},sidebar:"legacy",previous:{title:"mock_call",permalink:"/protostar/docs/legacy/testing/cheatcodes/mock-call"},next:{title:"reflect",permalink:"/protostar/docs/legacy/testing/cheatcodes/reflect"}},i={},l=[],s={toc:l};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"prepare"},(0,a.kt)("inlineCode",{parentName:"h1"},"prepare")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def prepare(\n    declared: DeclaredContract,\n    constructor_calldata: list[int] | dict | None = None,\n    salt: int | None = None\n) -> PreparedContract:\n\nclass PreparedContract:\n    constructor_calldata: List[int]\n    contract_address: int\n    class_hash: int\n")),(0,a.kt)("p",null,"Prepares contract for deployment given ",(0,a.kt)("inlineCode",{parentName:"p"},"DeclaredContract")," and constructor_calldata. The cheatcode is useful when you want to know contract address before deploying it to affect constructor with a targeted cheatcode. Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'@external\nfunc test_prank_constructor{syscall_ptr : felt*, range_check_ptr}():\n    %{\n        declared = declare("path/to/contract.cairo")\n        prepared = prepare(declared, [1,2,3])\n        start_prank(111, target_contract_address=prepared.contract_address)\n\n        # constructor will be affected by prank\n        deploy(prepared)\n    %}\n    return ()\nend\n\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can prepare multiple contracts from one ",(0,a.kt)("inlineCode",{parentName:"p"},"DeclaredContract"),".")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can provide ",(0,a.kt)("inlineCode",{parentName:"p"},"constructor_calldata")," as a dictionary to leverage ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/legacy/testing/cheatcodes/#data-transformer"},"data transformer"),".")))}d.isMDXComponent=!0}}]);