"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7075],{3905:function(t,e,r){r.d(e,{Zo:function(){return c},kt:function(){return g}});var n=r(7294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var u=n.createContext({}),p=function(t){var e=n.useContext(u),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},c=function(t){var e=p(t.components);return n.createElement(u.Provider,{value:e},t.children)},l={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,a=t.originalType,u=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),d=p(r),g=o,f=d["".concat(u,".").concat(g)]||d[g]||l[g]||a;return r?n.createElement(f,i(i({ref:e},c),{},{components:r})):n.createElement(f,i({ref:e},c))}));function g(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=t,s.mdxType="string"==typeof t?t:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9923:function(t,e,r){r.r(e),r.d(e,{assets:function(){return u},contentTitle:function(){return i},default:function(){return l},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p}});var n=r(3117),o=(r(7294),r(3905));const a={sidebar_label:"Debugging"},i=void 0,s={unversionedId:"tutorials/cairo-1-support/debugging",id:"tutorials/cairo-1-support/debugging",title:"debugging",description:"Currently, Cairo does not support a debugging mechanism per se, but we can print variables' values to the standard output.",source:"@site/docs/tutorials/08-cairo-1-support/07-debugging.md",sourceDirName:"tutorials/08-cairo-1-support",slug:"/tutorials/cairo-1-support/debugging",permalink:"/protostar/docs/tutorials/cairo-1-support/debugging",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/08-cairo-1-support/07-debugging.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_label:"Debugging"},sidebar:"tutorials",previous:{title:"Declaring new contracts",permalink:"/protostar/docs/tutorials/cairo-1-support/interacting-with-starknet/declare"},next:{title:"README",permalink:"/protostar/docs/tutorials/interacting-with-starknet/"}},u={},p=[],c={toc:p};function l(t){let{components:e,...r}=t;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Currently, Cairo does not support a debugging mechanism per se, but we can print variables' values to the standard output."),(0,o.kt)("h1",{id:"printing-to-stdout"},"Printing to stdout"),(0,o.kt)("p",null,"In order to print a variable's value to the standard output, we have to use ",(0,o.kt)("inlineCode",{parentName:"p"},"PrintTrait"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"use array::ArrayTrait;\nuse protostar_print::PrintTrait;\nuse result::ResultTrait;\n\n#[test]\nfn test_print_basic() {\n  1.print();\n\n  'hello'.print();\n\n  let mut array = ArrayTrait::new();\n  array.append('veni');\n  array.append('vidi');\n  array.append('vici');\n  array.print();\n\n  (1 == 2).print();\n\n  true.print();\n\n  assert(1 == 1, 'xxx');\n}\n")),(0,o.kt)("p",null,"You can print numbers, booleans and ",(0,o.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/how_cairo_works/consts.html#short-string-literals"},"Cairo short strings")," as well as arrays containing values of these types."))}l.isMDXComponent=!0}}]);