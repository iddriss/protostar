"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6749],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),h=a,f=p["".concat(i,".").concat(h)]||p[h]||d[h]||o;return r?n.createElement(f,c(c({ref:t},u),{},{components:r})):n.createElement(f,c({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<o;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5155:function(e,t,r){r.r(t),r.d(t,{assets:function(){return i},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l}});var n=r(3117),a=(r(7294),r(3905));const o={sidebar_label:"Cheatcodes"},c="Cheatcodes",s={unversionedId:"cairo-1/testing/cheatcodes",id:"cairo-1/testing/cheatcodes",title:"Cheatcodes",description:"Often while testing your contract you want to emulate complex scenarios. As an example, you might want to test how your contract behaves when not authorized contract calls it. Protostar lets you tests such scenarios with cheatcodes. In this section you will learn what cheatcodes are and how to use them to create strong tests for your contracts.",source:"@site/docs/cairo-1/05-testing/03-cheatcodes.md",sourceDirName:"cairo-1/05-testing",slug:"/cairo-1/testing/cheatcodes",permalink:"/protostar/docs/cairo-1/testing/cheatcodes",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/cairo-1/05-testing/03-cheatcodes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Cheatcodes"},sidebar:"cairo1",previous:{title:"Integration testing",permalink:"/protostar/docs/cairo-1/testing/integration-testing"},next:{title:"Gas",permalink:"/protostar/docs/cairo-1/testing/gas"}},i={},l=[{value:"Let&#39;s prank a contract",id:"lets-prank-a-contract",level:2},{value:"Other cheatcodes",id:"other-cheatcodes",level:2}],u={toc:l};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cheatcodes"},"Cheatcodes"),(0,a.kt)("p",null,"Often while testing your contract you want to emulate complex scenarios. As an example, you might want to test how your contract behaves when not authorized contract calls it. Protostar lets you tests such scenarios with ",(0,a.kt)("em",{parentName:"p"},"cheatcodes"),". In this section you will learn what cheatcodes are and how to use them to create strong tests for your contracts."),(0,a.kt)("h2",{id:"lets-prank-a-contract"},"Let's prank a contract"),(0,a.kt)("p",null,"Assume you want to test a user validation mechanism in your contract. You can leverage ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes-reference/start_prank"},"start_prank")," cheatcode to do that. Let's write a simple contract which validates caller address."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Deployed contract"',title:'"Deployed','contract"':!0},"#[contract]\nmod MinimalContract {\n    use starknet::get_caller_address;\n    use starknet::ContractAddress;\n    use starknet::ContractAddressIntoFelt252;\n    use traits::Into;\n    \n    #[external]\n    fn is_expected_user() {\n        let caller_address = get_caller_address();\n        assert(caller_address.into() == 123, 'not authorized');\n    }\n}\n")),(0,a.kt)("p",null,"We know ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/integration-testing#under-the-hood"},"from previous section")," that if we call ",(0,a.kt)("inlineCode",{parentName:"p"},"is_expected_user")," method, ",(0,a.kt)("inlineCode",{parentName:"p"},"caller_address")," will be ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),". To pass such test we have to use ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes-reference/start_prank"},"start_prank")," cheatcode. It sets the value returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"get_caller_address()")," for a targeted contract."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Test"',title:'"Test"'},"use cheatcodes::RevertedTransactionTrait;\nuse result::ResultTrait;\nuse array::ArrayTrait;\n\n#[test]\nfn test_invoke_errors() {\n    let contract_address = deploy_contract('minimal', @ArrayTrait::new()).unwrap();\n    start_prank(123, contract_address);\n    invoke(contract_address, 'is_expected_user', @ArrayTrait::new()).unwrap();\n}\n")),(0,a.kt)("p",null,"Such test will pass."),(0,a.kt)("h2",{id:"other-cheatcodes"},"Other cheatcodes"),(0,a.kt)("p",null,"You can find a list of all available cheatcodes in ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes-reference/"},"cheatcode reference")))}d.isMDXComponent=!0}}]);