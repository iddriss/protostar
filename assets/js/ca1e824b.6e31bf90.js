"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4821],{3905:function(t,e,a){a.d(e,{Zo:function(){return p},kt:function(){return f}});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function c(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},o=Object.keys(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var i=r.createContext({}),s=function(t){var e=r.useContext(i),a=e;return t&&(a="function"==typeof t?t(e):c(c({},e),t)),a},p=function(t){var e=s(t.components);return r.createElement(i.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,o=t.originalType,i=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),d=s(a),f=n,m=d["".concat(i,".").concat(f)]||d[f]||u[f]||o;return a?r.createElement(m,c(c({ref:e},p),{},{components:a})):r.createElement(m,c({ref:e},p))}));function f(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var o=a.length,c=new Array(o);c[0]=d;var l={};for(var i in e)hasOwnProperty.call(e,i)&&(l[i]=e[i]);l.originalType=t,l.mdxType="string"==typeof t?t:n,c[1]=l;for(var s=2;s<o;s++)c[s]=a[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2072:function(t,e,a){a.r(e),a.d(e,{assets:function(){return i},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s}});var r=a(3117),n=(a(7294),a(3905));const o={},c="call",l={unversionedId:"tutorials/cairo-1-support/cheatcodes/call",id:"tutorials/cairo-1-support/cheatcodes/call",title:"call",description:"Calls a deployed contract. Unlike invoke, it does not mutate the blockchain state.",source:"@site/docs/tutorials/08-cairo-1-support/05-cheatcodes/call.md",sourceDirName:"tutorials/08-cairo-1-support/05-cheatcodes",slug:"/tutorials/cairo-1-support/cheatcodes/call",permalink:"/protostar/docs/tutorials/cairo-1-support/cheatcodes/call",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/08-cairo-1-support/05-cheatcodes/call.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"Cheatcodes",permalink:"/protostar/docs/tutorials/cairo-1-support/cheatcodes/"},next:{title:"declare_cairo0",permalink:"/protostar/docs/tutorials/cairo-1-support/cheatcodes/declare-cairo0"}},i={},s=[{value:"Handling call failures",id:"handling-call-failures",level:2}],p={toc:s};function u(t){let{components:e,...a}=t;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"call"},(0,n.kt)("inlineCode",{parentName:"h1"},"call")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cairo"},"extern fn call(contract: felt252, function_name: felt252, calldata: Array::<felt252>) -> Result::<(Array::<felt252>), RevertedTransaction> nopanic;\n\nstruct RevertedTransaction {\n    panic_data: Array::<felt252>, \n}\n\ntrait RevertedTransactionTrait {\n    fn first(self: @RevertedTransaction) -> felt252;\n}\n")),(0,n.kt)("p",null,"Calls a ",(0,n.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/cairo-1-support/cheatcodes/deploy"},"deployed")," contract. Unlike ",(0,n.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/cairo-1-support/cheatcodes/invoke"},"invoke"),", it ",(0,n.kt)("strong",{parentName:"p"},"does not")," mutate the blockchain state."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"contract")," - deployed contract address"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"function_name")," - the name of the function you wish to call, this is the ",(0,n.kt)("a",{parentName:"li",href:"https://www.cairo-lang.org/docs/how_cairo_works/consts.html#short-string-literals"},"Cairo short string")," which can be at most 31-characters long."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"calldata")," - arguments to the target function")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Example"',title:'"Example"'},"use array::ArrayTrait;\nuse result::ResultTrait;\n\n#[test]\nfn test_call_simple() {\n    let mut calldata = ArrayTrait::new();\n    calldata.append(3);\n    calldata.append(2);\n    calldata.append(5);\n    let return_data2 = call(deployed_contract_address, 'foo', calldata).unwrap();\n    assert(*return_data2.at(0_u32) == 25, 'check call result');\n}\n")),(0,n.kt)("h2",{id:"handling-call-failures"},"Handling call failures"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Deployed contract"',title:'"Deployed','contract"':!0},"#[contract]\nmod MinimalContract {\n    #[view]\n    fn panic_with(panic_data: Array::<felt252>) {\n        panic(panic_data);\n    }\n}\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Test"',title:'"Test"'},"use cheatcodes::RevertedTransactionTrait;\n\n#[test]\nfn test_call_errors() {\n    let mut panic_data = ArrayTrait::new();\n    panic_data.append(2); // Array length\n    panic_data.append('error');\n    panic_data.append('data');\n    \n    match call(deployed_contract_address, 'panic_with', panic_data) {\n        Result::Ok(x) => assert(false, 'Shouldnt have succeeded'),\n        Result::Err(x) => {\n            assert(x.first() == 'error', 'first datum doesnt match');\n            assert(*x.panic_data.at(1_u32) == 'data', 'second datum doesnt match');\n        }\n    }\n")),(0,n.kt)("p",null,"You can find more examples ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/protostar/blob/18959214d46409be8bedd92cc6427c1945b1bcc8/tests/integration/cairo1_hint_locals/call/call_test.cairo"},"here"),"."))}u.isMDXComponent=!0}}]);