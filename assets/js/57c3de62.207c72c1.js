"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3413],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),l=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=l(t.components);return r.createElement(s.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,s=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),u=l(n),h=a,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(m,i(i({ref:e},p),{},{components:n})):r.createElement(m,i({ref:e},p))}));function h(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=t,c.mdxType="string"==typeof t?t:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4310:function(t,e,n){n.r(e),n.d(e,{assets:function(){return s},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return l}});var r=n(3117),a=(n(7294),n(3905));const o={sidebar_label:"Integration testing"},i="Integration testing",c={unversionedId:"cairo-1/testing/integration-testing",id:"cairo-1/testing/integration-testing",title:"Integration testing",description:"Using unit testing as much as possible is a good practice, as it makes your test suites run faster. However, when writing smart contracts you often want your test to cover the on-chain state and interactions between multiple contracts.",source:"@site/docs/cairo-1/05-testing/02-integration-testing.md",sourceDirName:"cairo-1/05-testing",slug:"/cairo-1/testing/integration-testing",permalink:"/protostar/docs/cairo-1/testing/integration-testing",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/cairo-1/05-testing/02-integration-testing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Integration testing"},sidebar:"cairo1",previous:{title:"Unit testing",permalink:"/protostar/docs/cairo-1/testing/unit-testing"},next:{title:"Cheatcodes",permalink:"/protostar/docs/cairo-1/testing/cheatcodes"}},s={},l=[{value:"How to test a contract",id:"how-to-test-a-contract",level:2},{value:"Transaction reverts",id:"transaction-reverts",level:2},{value:"Under the hood",id:"under-the-hood",level:2},{value:"Old cairo contracts",id:"old-cairo-contracts",level:2}],p={toc:l};function d(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"integration-testing"},"Integration testing"),(0,a.kt)("p",null,"Using ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/unit-testing"},"unit testing")," as much as possible is a good practice, as it makes your test suites run faster. However, when writing smart contracts you often want your test to cover the on-chain state and interactions between multiple contracts."),(0,a.kt)("p",null,"In this section, you will learn how to deploy and interact with a smart contract in Protostar for testing purposes. "),(0,a.kt)("h2",{id:"how-to-test-a-contract"},"How to test a contract"),(0,a.kt)("p",null,"To test a contract you need to use an important Protostar feature:  ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes"},"cheatcodes"),". Cheatcodes are additional library functions that Protostar exposes to help you with testing."),(0,a.kt)("p",null,"Let's write a test which deploys and calls a contract. First let's define our contract in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"src/lib.cairo")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Deployed contract"',title:'"Deployed','contract"':!0},"#[contract]\nmod MinimalContract {\n    #[external]\n    fn hello() {\n        assert(5 == 5, 'always true');\n    }\n}\n")),(0,a.kt)("p",null,"You need to define contract in ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/protostar-toml"},"protostar.toml")," configuration\nfile. Add it to the ",(0,a.kt)("inlineCode",{parentName:"p"},"[contracts]")," section"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="Configuration file"',title:'"Configuration','file"':!0},'[contracts]\nminimal = ["your_project_name"]\n')),(0,a.kt)("p",null,"We can write a test that deploys and calls this contract. Let's create a file ",(0,a.kt)("inlineCode",{parentName:"p"},"test_contract.cairo"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Example"',title:'"Example"'},"use array::ArrayTrait;\nuse result::ResultTrait;\n\n#[test]\nfn test_deploy() {\n    let deployed_contract_address = deploy_contract('minimal', ArrayTrait::new()).unwrap();\n    invoke(deployed_contract_address, 'hello', ArrayTrait::new()).unwrap();\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes-reference/deploy_contract"},"deploy_contract")," will declare and deploy the given contract. ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes-reference/invoke"},"invoke")," will invoke ",(0,a.kt)("inlineCode",{parentName:"p"},"hello")," method."),(0,a.kt)("h2",{id:"transaction-reverts"},"Transaction reverts"),(0,a.kt)("p",null,"Cheatcodes ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes-reference/deploy"},"deploy"),", ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes-reference/invoke"},"invoke")," and ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes-reference/call"},"call")," execute code on chain which can be reverted.\nIn such case, they return ",(0,a.kt)("inlineCode",{parentName:"p"},"RevertedTransaction")," structure. You can use it, for example, to verify if your contract reverts the transaction in a certain scenario."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Deployed contract"',title:'"Deployed','contract"':!0},"#[contract]\nmod MinimalContract {\n    #[external]\n    fn panic_with(panic_data: Array::<felt252>) {\n        panic(panic_data);\n    }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Test"',title:'"Test"'},"use cheatcodes::RevertedTransactionTrait;\nuse array::ArrayTrait;\nuse result::ResultTrait;\n\n#[test]\nfn test_invoke_errors() {\n    let deployed_contract_address = deploy_contract('minimal', ArrayTrait::new()).unwrap();\n    let mut panic_data = ArrayTrait::new();\n    panic_data.append(2); // Array length\n    panic_data.append('error');\n    panic_data.append('data');\n    \n    match invoke(deployed_contract_address, 'panic_with', panic_data) {\n        Result::Ok(x) => assert(false, 'Shouldnt have succeeded'),\n        Result::Err(x) => {\n            assert(x.first() == 'error', 'first datum doesnt match');\n            assert(*x.panic_data.at(1_u32) == 'data', 'second datum doesnt match');\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"under-the-hood"},"Under the hood"),(0,a.kt)("p",null,"You may ask, where the contract has been deployed? Protostar comes with a local Starknet instance which you can use to test your contracts.\nTo encourage good testing practices, each test case starts with a fresh Starknet instance. "),(0,a.kt)("p",null,"When Starknet instance is accessed through cheatcodes, it is analogous to accessing real Starknet through gateway. An example consequence of this behavior is that ",(0,a.kt)("inlineCode",{parentName:"p"},"get_caller_address")," will return ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," in the called contract."),(0,a.kt)("h2",{id:"old-cairo-contracts"},"Old cairo contracts"),(0,a.kt)("p",null,"Protostar allows you to test contracts written in old cairo. You can use cheatcode ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes-reference/declare-cairo0"},"declare_cairo0")," to declare them."))}d.isMDXComponent=!0}}]);