"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5672],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3246:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var r=n(3117),a=(n(7294),n(3905));const o={},i="invoke",s={unversionedId:"tutorials/deploying/migrations/invoke",id:"tutorials/deploying/migrations/invoke",title:"invoke",description:"This cheatcode invokes a StarkNet contract, with possible state changes. Can be useful for initializing proxies, etc.",source:"@site/docs/tutorials/08-deploying/02-migrations/invoke.md",sourceDirName:"tutorials/08-deploying/02-migrations",slug:"/tutorials/deploying/migrations/invoke",permalink:"/protostar/docs/tutorials/deploying/migrations/invoke",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/08-deploying/02-migrations/invoke.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"deploy_contract",permalink:"/protostar/docs/tutorials/deploying/migrations/deploy-contract"},next:{title:"Network configuration",permalink:"/protostar/docs/tutorials/deploying/network-config"}},c={},p=[{value:"Fees",id:"fees",level:2},{value:"Example",id:"example",level:2}],l={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"invoke"},(0,a.kt)("inlineCode",{parentName:"h1"},"invoke")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def invoke(\n    contract_address: int,\n    function_name: str,\n    inputs: list[int] | dict[str, Any] | None = None,\n    config: SignedCheatcodeConfig,\n    *,\n) -> None:\n")),(0,a.kt)("p",null,"This cheatcode invokes a StarkNet contract, with possible state changes. Can be useful for initializing proxies, etc.\n",(0,a.kt)("inlineCode",{parentName:"p"},"SignedCheatcodeConfig")," stores configuration used in cheatcodes that can be signed."),(0,a.kt)("p",null,"It's an extension of ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/deploying/network-config"},"CheatcodeNetworkConfig"),", so it's properties are applicable here as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'Wei = int\nFee = "auto" | Wei\nclass SignedCheatcodeConfig(CheatcodeNetworkConfig):\n    max_fee: Fee\n')),(0,a.kt)("p",null,"Auto-fee estimation is supported, and ",(0,a.kt)("inlineCode",{parentName:"p"},"starknet.py"),"'s estimation logic is used - see ",(0,a.kt)("a",{parentName:"p",href:"https://starknetpy.readthedocs.io/en/latest/guide.html#automatic-fee-estimation"},"starknet.py docs"),"."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can provide ",(0,a.kt)("inlineCode",{parentName:"p"},"inputs")," as a dictionary to use ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/deploying/migrations/#data-transformer"},"data transformer"),".")),(0,a.kt)("h2",{id:"fees"},"Fees"),(0,a.kt)("p",null,"We recommend using ",(0,a.kt)("inlineCode",{parentName:"p"},"max_fee")," to avoid unexpected network costs."),(0,a.kt)("p",null,"The config object is passed as a python dictionary."),(0,a.kt)("p",null,"This config object also contains properties of ",(0,a.kt)("inlineCode",{parentName:"p"},"CheatcodeNetworkConfig"),", see configuration options in the ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/deploying/network-config"},"related docs"),"."),(0,a.kt)("p",null,"Wallet used for providing the fee is global, and is provided with signing arguments, as described ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/deploying/cli#signing-a-declaration"},"here"),"."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ protostar migrate migrations/migration_01.cairo\n    --network testnet\n    --private-key-path ./pkey\n    --account-address 0x1231231212321\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="migrations/migration_01.cairo"',title:'"migrations/migration_01.cairo"'},'%lang starknet\n\n@external\nfunc up() {\n    %{\n        contract_address = deploy_contract(\n             "./build/main.json",\n             config={"wait_for_acceptance": True}\n        ).contract_address\n\n        invoke(\n            contract_address,\n            "initialize",\n            {"new_authority": 123},\n            config={\n                "wait_for_acceptance": True,\n                "max_fee": "auto",\n            }\n        )\n    %}\n\n    return ();\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="src/main.cairo"',title:'"src/main.cairo"'},'%lang starknet\n\n@storage_var\nfunc authority() -> (res: felt) {\n}\n\n@external\nfunc initialize{\n    syscall_ptr: felt*,\n    pedersen_ptr: HashBuiltin*,\n    range_check_ptr\n}(new_authority: felt) {\n    let (authority_now) = authority.read();\n    tempvar syscall_ptr = syscall_ptr;\n    tempvar pedersen_ptr = pedersen_ptr;\n    tempvar range_check_ptr = range_check_ptr;\n\n    if (authority_now != 0) {\n        with_attr error_message("Authority has already been set") {\n            assert 1 = 0;\n        }\n        tempvar syscall_ptr = syscall_ptr;\n        tempvar pedersen_ptr = pedersen_ptr;\n        tempvar range_check_ptr = range_check_ptr;\n    }\n\n    authority.write(new_authority);\n    return ();\n}\n')))}u.isMDXComponent=!0}}]);