"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6562],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,f=m["".concat(l,".").concat(u)]||m[u]||p[u]||o;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3915:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var r=n(3117),a=(n(7294),n(3905));const o={},i="send_message_to_l2",s={unversionedId:"tutorials/testing/cheatcodes/send-message-to-l2",id:"tutorials/testing/cheatcodes/send-message-to-l2",title:"send_message_to_l2",description:"This cheatcode simulates an incoming message from L1 to L2 executed with fnname at toaddress contract address.",source:"@site/docs/tutorials/07-testing/02-cheatcodes/send-message-to-l2.md",sourceDirName:"tutorials/07-testing/02-cheatcodes",slug:"/tutorials/testing/cheatcodes/send-message-to-l2",permalink:"/protostar/docs/tutorials/testing/cheatcodes/send-message-to-l2",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/07-testing/02-cheatcodes/send-message-to-l2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"roll",permalink:"/protostar/docs/tutorials/testing/cheatcodes/roll"},next:{title:"skip",permalink:"/protostar/docs/tutorials/testing/cheatcodes/skip"}},l={},c=[],d={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"send_message_to_l2"},(0,a.kt)("inlineCode",{parentName:"h1"},"send_message_to_l2")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def send_message_to_l2(\n    fn_name: str,\n    from_address: int = 0,\n    to_address: Optional[int] = None,\n    payload: Optional[CairoOrPythonData] = None,\n) -> None:\n    ...\n")),(0,a.kt)("p",null,"This cheatcode simulates an incoming message from L1 to L2 executed with ",(0,a.kt)("inlineCode",{parentName:"p"},"fn_name")," at ",(0,a.kt)("inlineCode",{parentName:"p"},"to_address")," contract address.\nIt can be useful when implementing i.e. a token bridge and wanting to test the message consuming behavior.\nThis cheatcode requires that the contract at ",(0,a.kt)("inlineCode",{parentName:"p"},"to_address")," address has a ",(0,a.kt)("inlineCode",{parentName:"p"},"@l1_handler")," named ",(0,a.kt)("inlineCode",{parentName:"p"},"fn_name"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fn_name")," \u2014 ",(0,a.kt)("inlineCode",{parentName:"li"},"@l1_handler")," function name. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"from_address")," \u2014 An l1 address with which the message will be sent."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"to_address")," \u2014 A l2 contract's address - the receiver of the message, which implements the called ",(0,a.kt)("inlineCode",{parentName:"li"},"@l1_handler"),". Defaults to the current contract."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"payload")," \u2014 ",(0,a.kt)("inlineCode",{parentName:"li"},"@l1_handler")," function parameters, without ",(0,a.kt)("inlineCode",{parentName:"li"},"from_address"),". This can be passed as a dictionary, or as a flat array of ints. Defaults to empty array. ")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can leverage ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/#data-transformer"},"data transformer")," to pass payload as a dictionary instead of a list of numbers.")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Do not provide ",(0,a.kt)("inlineCode",{parentName:"p"},"from_address")," (needed for all L1 handlers in StarkNet) in the function's ",(0,a.kt)("inlineCode",{parentName:"p"},"payload")," - this is passed automatically using ",(0,a.kt)("inlineCode",{parentName:"p"},"from_address")," parameter. ")))}p.isMDXComponent=!0}}]);