"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7770],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9093:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return c}});var a=n(3117),r=(n(7294),n(3905));const s={},o="Testing",i={unversionedId:"tutorials/testing/README",id:"tutorials/testing/README",title:"Testing",description:"Protostar provides a flexible testing environment for Cairo smart contracts.",source:"@site/docs/tutorials/07-testing/README.md",sourceDirName:"tutorials/07-testing",slug:"/tutorials/testing/",permalink:"/protostar/docs/tutorials/testing/",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/07-testing/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"Network configuration",permalink:"/protostar/docs/tutorials/deploying/network-config"},next:{title:"Deploying contracts from tests",permalink:"/protostar/docs/tutorials/testing/deploying-contracts"}},l={},c=[{value:"Unit testing",id:"unit-testing",level:2},{value:"Asserts",id:"asserts",level:2},{value:"Setup hooks",id:"setup-hooks",level:2},{value:"Setup suite",id:"setup-suite",level:3},{value:"Setup case",id:"setup-case",level:3},{value:"Importing Python modules in hints",id:"importing-python-modules-in-hints",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"testing"},"Testing"),(0,r.kt)("p",null,"Protostar provides a flexible testing environment for Cairo smart contracts.\nIt allows to write unit/integration tests with a help of ",(0,r.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/"},"cheatcodes"),"."),(0,r.kt)("h2",{id:"unit-testing"},"Unit testing"),(0,r.kt)("p",null,"We will start with a ",(0,r.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/project-initialization"},"just created protostar project"),".\nIn your ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," directory create a ",(0,r.kt)("inlineCode",{parentName:"p"},"utils.cairo")," file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="src/utils.cairo"',title:'"src/utils.cairo"'},"func sum_func{syscall_ptr: felt*, range_check_ptr}(a: felt, b: felt) -> felt {\n    return a + b;\n}\n")),(0,r.kt)("p",null,"This is our target function, which we are going to test.\nThen in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tests")," directory create file ",(0,r.kt)("inlineCode",{parentName:"p"},"test_utils.cairo"),", which contains a single test case."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="tests/test_utils.cairo"',title:'"tests/test_utils.cairo"'},"%lang starknet\n\nfrom src.utils import sum_func\n\n@external\nfunc test_sum{syscall_ptr: felt*, range_check_ptr}() {\n    let r = sum_func(4, 3);\n    assert r = 7;\n    return ();\n}\n")),(0,r.kt)("p",null,"Then run your test with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"protostar test ./tests\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"In the example above, Protostar will run every test case it manages to find in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tests")," directory. You can read more about specifying where and how Protostar should search for test cases by running ",(0,r.kt)("inlineCode",{parentName:"p"},"protostar test --help"),". ")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you experience any errors during test collection phase consider using ",(0,r.kt)("inlineCode",{parentName:"p"},"--safe-collecting")," flag.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="Expected result"',title:'"Expected','result"':!0},"Collected 1 items\n\ntest_utils: .\n----- TEST SUMMARY ------\n1 passed\nRan 1 out of 1 total tests\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can place your test files anywhere you want. Protostar recursively searches\nthe given directory for Cairo files with a name starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"test_")," and treats them as tests files.\nAll functions inside a test file starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"test_")," are treated as separate test cases.")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Protostar auto-removes constructors from test files. You can test a constructor using the ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy_contract")," cheatcode.")),(0,r.kt)("h2",{id:"asserts"},"Asserts"),(0,r.kt)("p",null,"Protostar ships with its own assert functions. They don't accept ",(0,r.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/how_cairo_works/builtins.html?highlight=implicit%20arguments#implicit-arguments"},"implicit arguments")," compared to asserts from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/math.cairo"},(0,r.kt)("inlineCode",{parentName:"a"},"starkware.cairo.common.math")),". You can import Protostar asserts in the following way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="test_my_contract.cairo"',title:'"test_my_contract.cairo"'},"from protostar.asserts import (\n    assert_eq,\n    assert_not_eq,\n    assert_signed_lt,\n    assert_signed_le,\n    assert_signed_gt,\n    assert_unsigned_lt,\n    assert_unsigned_le,\n    assert_unsigned_gt,\n    assert_signed_ge,\n    assert_unsigned_ge,\n)\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If your IDE supports Cairo and doesn't know how to import ",(0,r.kt)("inlineCode",{parentName:"p"},"protostar"),", add the following directory\n",(0,r.kt)("inlineCode",{parentName:"p"},"$(which protostar)/../cairo")," to the ",(0,r.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/how_cairo_works/imports.html?highlight=cairo_path"},(0,r.kt)("inlineCode",{parentName:"a"},"CAIRO_PATH")),".")),(0,r.kt)("p",null,"You can find all ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/protostar/blob/master/cairo/protostar/asserts.cairo"},"assert signatures here"),"."),(0,r.kt)("h2",{id:"setup-hooks"},"Setup hooks"),(0,r.kt)("p",null,"Often while writing tests you have some setup work that needs to happen before tests run.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"__setup__")," (",(0,r.kt)("a",{parentName:"p",href:"#setup-suite"},"setup suite"),") and ",(0,r.kt)("inlineCode",{parentName:"p"},"setup_<test_name>")," (",(0,r.kt)("a",{parentName:"p",href:"#setup-case"},"setup case"),")\nhooks can simplify and speed up your tests."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," variable to pass data from setup hooks to test functions as demonstrated in\nexamples below."),(0,r.kt)("h3",{id:"setup-suite"},"Setup suite"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cairo"},"@external\nfunc __setup__()\n")),(0,r.kt)("p",null,"The setup suite hook is shared between all test cases in a test suite (Cairo module),\nand is executed before test cases."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Using setup suite hook"',title:'"Using',setup:!0,suite:!0,'hook"':!0},'@external\nfunc __setup__() {\n    %{ context.contract_a_address = deploy_contract("./tests/integration/testing_hooks/basic_contract.cairo").contract_address %}\n    return ();\n}\n\n@external\nfunc test_something() {\n    tempvar contract_address;\n    %{ ids.contract_address = context.contract_a_address %}\n\n    // ...\n\n    return ();\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Protostar executes ",(0,r.kt)("inlineCode",{parentName:"p"},"__setup__")," only once per test suite.\nThen, for each test case Protostar copies the StarkNet state and the ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," object.")),(0,r.kt)("h3",{id:"setup-case"},"Setup case"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cairo"},"@external\nfunc setup_tested_property()\n\n@external\nfunc test_tested_property()\n")),(0,r.kt)("p",null,"The setup case hook is bound to a matching test case and is executed just before the test case\nitself.\nThe hook is executed within a context built by the ",(0,r.kt)("inlineCode",{parentName:"p"},"__setup__")," hook,\nbut it does not influence other test cases' contexts.\nThen, Protostar immediately executes the test case function.\nThis makes them useful to extract test-specific setup logic from test code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Using setup case hook to prepare test-specific state"',title:'"Using',setup:!0,case:!0,hook:!0,to:!0,prepare:!0,"test-specific":!0,'state"':!0},"@external\nfunc __setup__{\n    syscall_ptr: felt*,\n    pedersen_ptr: HashBuiltin*,\n    range_check_ptr\n}() {\n    balance.write(10);\n    return ();\n}\n\n@external\nfunc setup_need_more_money{\n    syscall_ptr: felt*,\n    pedersen_ptr: HashBuiltin*,\n    range_check_ptr\n}() {\n    balance.write(10000);\n    return ();\n}\n\n@external\nfunc test_need_more_money{\n    syscall_ptr: felt*,\n    pedersen_ptr: HashBuiltin*,\n    range_check_ptr\n}() {\n    alloc_locals;\n    let (amount_ref) = balance.read();\n    local amount = amount_ref;\n\n    assert amount = 10000;\n\n    return ();\n}\n\n@external\nfunc test_foo{\n    syscall_ptr: felt*,\n    pedersen_ptr: HashBuiltin*,\n    range_check_ptr\n}() {\n    alloc_locals;\n    let (amount_ref) = balance.read();\n    local amount = amount_ref;\n\n    assert amount = 10;\n\n    return ();\n}\n")),(0,r.kt)("p",null,"You can also use setup case hooks to configure the behavior of a particular test case,\nfor example, by calling the ",(0,r.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/max-examples"},(0,r.kt)("inlineCode",{parentName:"a"},"max_examples"))," cheatcode.\nSome configuration-specific cheatcodes are only available within setup cases, like ",(0,r.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/example"},(0,r.kt)("inlineCode",{parentName:"a"},"example")),"\nand ",(0,r.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/testing/cheatcodes/given"},(0,r.kt)("inlineCode",{parentName:"a"},"given")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Using setup case hook to configure fuzzing test"',title:'"Using',setup:!0,case:!0,hook:!0,to:!0,configure:!0,fuzzing:!0,'test"':!0},"@external\nfunc setup_something() {\n    %{\n        max_examples(500)\n        given(a = strategy.felts())\n    %}\n    return ();\n}\n\n@external\nfunc test_something(a: felt) {\n    // ...\n\n    return ();\n}\n")),(0,r.kt)("h3",{id:"importing-python-modules-in-hints"},"Importing Python modules in hints"),(0,r.kt)("p",null,"Protostar allows using external Python code in hint blocks, for example to verify a signature using third party library."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"cairo-path")," is automatically added to ",(0,r.kt)("inlineCode",{parentName:"p"},"sys.path")," in executed hints. This includes project root, ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lib")," directories. Any Python module files stored there can be imported without any extra configuration."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH"},(0,r.kt)("inlineCode",{parentName:"a"},"PYTHONPATH")," environment variable ")," is fully supported, and Protostar will extend ",(0,r.kt)("inlineCode",{parentName:"p"},"sys.path")," with this variable's value in executed Cairo code.\nThis approach can be used to include some packages from Python virtual environment (by adding ",(0,r.kt)("inlineCode",{parentName:"p"},"site_packages")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PYTHONPATH"),")."),(0,r.kt)("p",null,"For example, having the standard project file structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 lib\n\u251c\u2500\u2500 protostar.toml\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 main.cairo\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 pymodule.py\n    \u2514\u2500\u2500 test_main.cairo\n")),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"pymodule.py"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_three():\n    return 3\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"get_three")," function can be used in ",(0,r.kt)("inlineCode",{parentName:"p"},"test_main.cairo")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cairo"},"%lang starknet\nfrom src.main import balance, increase_balance\nfrom starkware.cairo.common.cairo_builtins import HashBuiltin\n\n@external\nfunc test_getting_tree() {\n    alloc_locals;\n    local res;\n    %{\n        from tests.pymodule import get_three\n        ids.res = get_three()\n    %}\n\n    assert res = 3;\n    return ();\n}\n")))}u.isMDXComponent=!0}}]);