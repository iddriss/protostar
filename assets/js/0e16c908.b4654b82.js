"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5028],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),i=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=i(r),f=a,g=u["".concat(l,".").concat(f)]||u[f]||d[f]||s;return r?n.createElement(g,c(c({ref:t},p),{},{components:r})):n.createElement(g,c({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,c=new Array(s);c[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var i=2;i<s;i++)c[i]=r[i];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5436:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return i}});var n=r(3117),a=(r(7294),r(3905));const s={},c="start_prank",o={unversionedId:"legacy/testing/cheatcodes/start-prank",id:"legacy/testing/cheatcodes/start-prank",title:"start_prank",description:"Changes a caller address returned by getcalleraddress() until the returned callable is called. If targetcontractaddress is specified, startprank affects only the contract with the specified address. Otherwise, startprank affects the current contract.",source:"@site/docs/legacy/07-testing/02-cheatcodes/start-prank.md",sourceDirName:"legacy/07-testing/02-cheatcodes",slug:"/legacy/testing/cheatcodes/start-prank",permalink:"/protostar/docs/legacy/testing/cheatcodes/start-prank",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/legacy/07-testing/02-cheatcodes/start-prank.md",tags:[],version:"current",frontMatter:{},sidebar:"legacy",previous:{title:"skip",permalink:"/protostar/docs/legacy/testing/cheatcodes/skip"},next:{title:"store",permalink:"/protostar/docs/legacy/testing/cheatcodes/store"}},l={},i=[{value:"In unit tests",id:"in-unit-tests",level:2},{value:"In integration tests",id:"in-integration-tests",level:2}],p={toc:i};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"start_prank"},(0,a.kt)("inlineCode",{parentName:"h1"},"start_prank")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def start_prank(caller_address: int, target_contract_address: Optional[int] = None) -> Callable: ...\n")),(0,a.kt)("p",null,"Changes a caller address returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"get_caller_address()")," until the returned callable is called. If ",(0,a.kt)("inlineCode",{parentName:"p"},"target_contract_address")," is specified, ",(0,a.kt)("inlineCode",{parentName:"p"},"start_prank")," affects only the contract with the specified address. Otherwise, ",(0,a.kt)("inlineCode",{parentName:"p"},"start_prank")," affects the current contract."),(0,a.kt)("h2",{id:"in-unit-tests"},"In unit tests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Local assert passes"',title:'"Local',assert:!0,'passes"':!0},"@external\nfunc test_remote_prank{syscall_ptr: felt*, range_check_ptr}() {\n    %{ stop_prank_callable = start_prank(123) %}\n\n    let (caller_addr) = get_caller_address();\n    // Does not raise error\n    assert caller_addr = 123;\n\n    %{ stop_prank_callable() %}\n    return ();\n}\n")),(0,a.kt)("h2",{id:"in-integration-tests"},"In integration tests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./pranked_contract.cairo"',title:'"./pranked_contract.cairo"'},'%lang starknet\n\nfrom starkware.starknet.common.syscalls import get_caller_address\n\n@external\nfunc assert_pranked{syscall_ptr: felt*}() {\n    let (caller_addr) = get_caller_address();\n    with_attr error_message("Not pranked!") {\n        assert caller_addr = 123;\n    }\n    return ();\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Remote assert passes"',title:'"Remote',assert:!0,'passes"':!0},'@contract_interface\nnamespace Pranked {\n    func assert_pranked() -> () {\n    }\n}\n\n@external\nfunc test_remote_prank{syscall_ptr: felt*, range_check_ptr}() {\n    alloc_locals;\n    local contract_address: felt;\n    %{\n        ids.contract_address = deploy_contract("./pranked_contract.cairo").contract_address\n        stop_prank_callable = start_prank(123, target_contract_address=ids.contract_address)\n    %}\n    // Does not raise error\n    Pranked.assert_pranked(contract_address=contract_address);\n    %{ stop_prank_callable() %}\n    return ();\n}\n')))}d.isMDXComponent=!0}}]);