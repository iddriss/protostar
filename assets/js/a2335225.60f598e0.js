"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5958],{3905:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),p=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},s=function(t){var e=p(t.components);return r.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,s=c(t,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:e},s),{},{components:n})):r.createElement(f,o({ref:e},s))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c.mdxType="string"==typeof t?t:a,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6860:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_label:"Compilation"},o="Compiling a Cairo 1 Project with Protostar",c={unversionedId:"cairo-1/interacting-with-starknet/compiling",id:"cairo-1/interacting-with-starknet/compiling",title:"Compiling a Cairo 1 Project with Protostar",description:"To build your contracts, first define them in protostar.toml",source:"@site/docs/cairo-1/07-interacting-with-starknet/09-compiling.md",sourceDirName:"cairo-1/07-interacting-with-starknet",slug:"/cairo-1/interacting-with-starknet/compiling",permalink:"/protostar/docs/cairo-1/interacting-with-starknet/compiling",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/cairo-1/07-interacting-with-starknet/09-compiling.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_label:"Compilation"},sidebar:"cairo1",previous:{title:"Scripting",permalink:"/protostar/docs/cairo-1/interacting-with-starknet/scripting"}},l={},p=[{value:"Output directory",id:"output-directory",level:2},{value:"Compiling a single contract",id:"compiling-a-single-contract",level:2}],s={toc:p};function u(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"compiling-a-cairo-1-project-with-protostar"},"Compiling a Cairo 1 Project with Protostar"),(0,a.kt)("p",null,"To build your contracts, first define them in ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/protostar-toml#contracts-section"},(0,a.kt)("inlineCode",{parentName:"a"},"protostar.toml"))),(0,a.kt)("p",null,"To build run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="build"',title:'"build"'},"protostar build\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cli-reference#build"},"Check CLI reference")," for more details."),(0,a.kt)("h2",{id:"output-directory"},"Output directory"),(0,a.kt)("p",null,"Running ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cli-reference#build"},(0,a.kt)("inlineCode",{parentName:"a"},"protostar build"))," command will generate the compiled contracts in\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," directory by default.\nYou can specify a custom output directory using\nthe ",(0,a.kt)("a",{parentName:"p",href:"../../cli-reference#compiled-contracts-dir-pathbuild-1"},(0,a.kt)("inlineCode",{parentName:"a"},"--compiled-contracts-dir"))," argument."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Example"',title:'"Example"'},"$ protostar build --compiled-contracts-dir out\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".sierra.json")," files contain contracts compiled to the sierra format. This format is used to declare contracts on\nStarknet.\nRead more about\nsierra ",(0,a.kt)("a",{parentName:"p",href:"https://docs.starknet.io/documentation/architecture_and_concepts/Contracts/cairo-1-and-sierra"},"here"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".casm.json")," files contain contracts compiled to the casm format which can be executed on the Cairo Virtual Machine. This\nformat is used to calculate ",(0,a.kt)("inlineCode",{parentName:"p"},"compiled_class_hash")," of a contract."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".class_hash")," files contain class hash of the built contract"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".compiled_class_hash")," files contain compiled class hash of the built contract"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If you need to print machine-readable output in JSON format, you should use ",(0,a.kt)("inlineCode",{parentName:"p"},"--json")," flag."),(0,a.kt)("h2",{parentName:"admonition",id:"using-external-dependencies"},"Using external dependencies"),(0,a.kt)("p",{parentName:"admonition"},"If your build requires using external dependencies, you can specify additional paths in the ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," command. To\ndo that, you need to use the ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cli-reference#linked-libraries-path"},(0,a.kt)("inlineCode",{parentName:"a"},"--linked-libraries"))," argument like this:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"$ protostar build --linked-libraries /path/to/the/external/lib\n"))),(0,a.kt)("p",null,"Provided paths must contain correctly formatted Cairo packages, otherwise build will fail.\n:::"),(0,a.kt)("h2",{id:"compiling-a-single-contract"},"Compiling a single contract"),(0,a.kt)("p",null,"If your ",(0,a.kt)("inlineCode",{parentName:"p"},"protostar.toml")," file defines multiple contracts, and you wish to compile only one of them, you can specify\nthe ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cli-reference#--contract-name-string-1"},(0,a.kt)("inlineCode",{parentName:"a"},"--contract-name"))," argument:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ protostar build --contract-name my_contract\n")))}u.isMDXComponent=!0}}]);