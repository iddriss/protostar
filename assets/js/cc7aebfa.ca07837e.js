"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3980],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=s(n),d=a,m=f["".concat(i,".").concat(d)]||f[d]||p[d]||c;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=f;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<c;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9138:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s}});var r=n(3117),a=(n(7294),n(3905));const c={},o="reflect",l={unversionedId:"legacy/testing/cheatcodes/reflect",id:"legacy/testing/cheatcodes/reflect",title:"reflect",description:"Loads specified Cairo object into a Python type. reflect is a function that takes in ids and returns Reflector object that behaves simillarly. To retrieve the value use get() method which can return:",source:"@site/docs/legacy/07-testing/02-cheatcodes/reflect.md",sourceDirName:"legacy/07-testing/02-cheatcodes",slug:"/legacy/testing/cheatcodes/reflect",permalink:"/protostar/docs/legacy/testing/cheatcodes/reflect",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/legacy/07-testing/02-cheatcodes/reflect.md",tags:[],version:"current",frontMatter:{},sidebar:"legacy",previous:{title:"prepare",permalink:"/protostar/docs/legacy/testing/cheatcodes/prepare"},next:{title:"reject",permalink:"/protostar/docs/legacy/testing/cheatcodes/reject"}},i={},s=[],u={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reflect"},(0,a.kt)("inlineCode",{parentName:"h1"},"reflect")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def reflect(ids) -> Reflector:\n")),(0,a.kt)("p",null,"Loads specified Cairo object into a Python type. ",(0,a.kt)("inlineCode",{parentName:"p"},"reflect")," is a function that takes in ",(0,a.kt)("inlineCode",{parentName:"p"},"ids")," and returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Reflector")," object that behaves simillarly. To retrieve the value use ",(0,a.kt)("inlineCode",{parentName:"p"},"get()")," method which can return:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int")," (for felt)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RelocatableValue")," (for pointer)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CairoStruct")," (for more complex types)")),(0,a.kt)("p",null,"You can use it to print Cairo data and compare complex structures."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:"title=Printing",title:"Printing"},"%lang starknet\n\nstruct SimpleStruct {\n    x: felt,\n}\n\n@external\nfunc test_reflect_simple() {\n    alloc_locals;\n\n    local simple_struct: SimpleStruct = SimpleStruct(x=10);\n\n    %{\n        simple_struct = reflect(ids).simple_struct.get()\n        print(simple_struct)\n        # output:\n        # CairoStruct(\n        #     x=10\n        # )\n\n        assert simple_struct.x == 10\n    %}\n\n    return ();\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:"title=Pointers",title:"Pointers"},"%lang starknet\n\nfrom starkware.cairo.common.registers import get_fp_and_pc\n\n@external\nfunc test_pointers() {\n    alloc_locals;\n\n    let (__fp__, _) = get_fp_and_pc();\n\n    local pointee: felt = 13;\n    local ptr1: felt* = &pointee;\n    local ptr2: felt* = &pointee;\n\n    %{\n        ptr1 = reflect(ids).ptr1.get()\n        ptr2 = reflect(ids).ptr2.get()\n\n        print(ptr1) # output: 1:8\n        print(type(ptr1)) # output: RelocatableValue\n        assert ptr1 == ptr2  # Pointers are compared directly using their addresses\n    %}\n    return ();\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:"title=Nested comparisons",title:"Nested",comparisons:!0},"%lang starknet\n\nstruct InnerStruct {\n    value: felt,\n}\n\nstruct OuterStruct {\n    inner_struct: InnerStruct,\n}\n\n@external\nfunc test_nesting() {\n    alloc_locals;\n    local inner_struct: InnerStruct = InnerStruct(value=7);\n    local outer_struct: OuterStruct = OuterStruct(inner_struct=inner_struct);\n\n    %{\n        outer_struct = reflect(ids).outer_struct.get()\n        OuterStruct = CairoStruct #\n        InnerStruct = CairoStruct # This way you can add aliases for readability\n\n        # You can compare nested structs\n        assert outer_struct == OuterStruct(\n            inner_struct=InnerStruct(\n                value=7\n            )\n        )\n    %}\n    return ();\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:"title=Wildcards",title:"Wildcards"},"%lang starknet\n\nstruct TwoFieldStruct {\n    value1: felt,\n    value2: felt,\n}\n\n@external\nfunc test_wildcards() {\n    alloc_locals;\n    local two_field_struct: TwoFieldStruct = TwoFieldStruct(value1=23, value2=17);\n\n    %{\n        two_field_struct = reflect(ids).two_field_struct.get()\n        assert two_field_struct == CairoStruct(\n            value1=23,\n            value2=two_field_struct.value2\n            # You can use struct members in comparison to make sure it evaluates to true\n        )\n    %}\n    return ();\n}\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Unlike ",(0,a.kt)("inlineCode",{parentName:"p"},"ids"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"reflect")," does not automatically dereference pointers. Currently you have to dereference them in Cairo.")))}p.isMDXComponent=!0}}]);