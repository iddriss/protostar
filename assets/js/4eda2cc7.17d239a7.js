"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9233],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2612:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return s}});var r=n(3117),a=(n(7294),n(3905));const o={},i="load",c={unversionedId:"legacy/testing/cheatcodes/load",id:"legacy/testing/cheatcodes/load",title:"load",description:"Loads storage variable with name variablename and given key and variabletype from a contract with targetcontractaddress.",source:"@site/docs/legacy/07-testing/02-cheatcodes/load.md",sourceDirName:"legacy/07-testing/02-cheatcodes",slug:"/legacy/testing/cheatcodes/load",permalink:"/protostar/docs/legacy/testing/cheatcodes/load",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/legacy/07-testing/02-cheatcodes/load.md",tags:[],version:"current",frontMatter:{},sidebar:"legacy",previous:{title:"given",permalink:"/protostar/docs/legacy/testing/cheatcodes/given"},next:{title:"max_examples",permalink:"/protostar/docs/legacy/testing/cheatcodes/max-examples"}},l={},s=[],p={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"load"},(0,a.kt)("inlineCode",{parentName:"h1"},"load")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def load(\n    target_contract_address: int,\n    variable_name: str,\n    variable_type: str,\n    key: list[int] | None = None\n) -> list[int]:\n")),(0,a.kt)("p",null,"Loads storage variable with name ",(0,a.kt)("inlineCode",{parentName:"p"},"variable_name")," and given ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"variable_type")," from a contract with ",(0,a.kt)("inlineCode",{parentName:"p"},"target_contract_address"),".\n",(0,a.kt)("inlineCode",{parentName:"p"},"variable_type")," is provided as a string representation of type name.\nExample:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./src/contract.cairo"',title:'"./src/contract.cairo"'},"%lang starknet\n\nfrom starkware.cairo.common.cairo_builtins import HashBuiltin\n\nstruct Value {\n    a: felt,\n    b: felt,\n}\n\n@storage_var\nfunc store_val(a: felt, b: felt) -> (res: Value) {\n}\n\n@storage_var\nfunc store_felt() -> (res: felt) {\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./test/test_store.cairo"',title:'"./test/test_store.cairo"'},'%lang starknet\nfrom starkware.cairo.common.cairo_builtins import HashBuiltin\n\n@external\nfunc test_store{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}() {\n    alloc_locals;\n    local contract_address;\n    %{\n        ids.contract_address = deploy_contract("./src/contract.cairo").contract_address\n        felt_val = load(ids.contract_address, "store_felt", "felt")\n        assert felt_val == [0]\n\n        value_val = load(ids.contract_address, "store_val", "Value", key=[1,2])\n        assert value_val == [0, 0]\n    %}\n    return ();\n}\n')),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"You have to provide ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," as list of ints. In the future Data Transformer will be supported.")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"There is no type checking for ",(0,a.kt)("inlineCode",{parentName:"p"},"variable_name"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"variable_type")," make sure you provided values correctly.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"key")," is a list of arguments because Cairo ",(0,a.kt)("inlineCode",{parentName:"p"},"@storage_var")," maps any number of felt arguments to any number of felt values.")))}d.isMDXComponent=!0}}]);