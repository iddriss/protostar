"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6128],{3905:function(t,e,r){r.d(e,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var c=n.createContext({}),s=function(t){var e=n.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):a(a({},e),t)),r},p=function(t){var e=s(t.components);return n.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,i=t.originalType,c=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),m=s(r),d=o,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return r?n.createElement(f,a(a({ref:e},p),{},{components:r})):n.createElement(f,a({ref:e},p))}));function d(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=r.length,a=new Array(i);a[0]=m;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l.mdxType="string"==typeof t?t:o,a[1]=l;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3139:function(t,e,r){r.r(e),r.d(e,{assets:function(){return c},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s}});var n=r(3117),o=(r(7294),r(3905));const i={sidebar_label:"Compilation"},a="Compiling a Project with Protostar",l={unversionedId:"tutorials/compiling",id:"tutorials/compiling",title:"Compiling a Project with Protostar",description:"To compile your Starknet contracts using Protostar, follow these steps:",source:"@site/docs/tutorials/05-compiling.md",sourceDirName:"tutorials",slug:"/tutorials/compiling",permalink:"/protostar/docs/tutorials/compiling",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/05-compiling.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Compilation"},sidebar:"tutorials",previous:{title:"Configuration file",permalink:"/protostar/docs/tutorials/configuration-file"},next:{title:"Dependencies",permalink:"/protostar/docs/tutorials/dependencies-management"}},c={},s=[{value:"Checking Cairo-lang version",id:"checking-cairo-lang-version",level:2}],p={toc:s};function u(t){let{components:e,...r}=t;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"compiling-a-project-with-protostar"},"Compiling a Project with Protostar"),(0,o.kt)("p",null,"To compile your Starknet contracts using Protostar, follow these steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Specify the contracts and their corresponding Cairo source files in the ",(0,o.kt)("a",{parentName:"li",href:"/docs/tutorials/configuration-file"},(0,o.kt)("inlineCode",{parentName:"a"},"protostar.toml")," configuration file"),".\nEach Cairo file that contains an entrypoint function should be listed in the ",(0,o.kt)("a",{parentName:"li",href:"/docs/tutorials/configuration-file#contracts"},(0,o.kt)("inlineCode",{parentName:"a"},"contracts")," section of the configuration file"),".\nAn entrypoint is a function decorated with ",(0,o.kt)("a",{parentName:"li",href:"https://starknet.io/docs/hello_starknet/constructors.html"},(0,o.kt)("inlineCode",{parentName:"a"},"@constructor")),", ",(0,o.kt)("a",{parentName:"li",href:"https://starknet.io/docs/hello_starknet/intro.html"},(0,o.kt)("inlineCode",{parentName:"a"},"@external")),", ",(0,o.kt)("a",{parentName:"li",href:"https://starknet.io/docs/hello_starknet/intro.html"},(0,o.kt)("inlineCode",{parentName:"a"},"@view")),", or ",(0,o.kt)("a",{parentName:"li",href:"https://starknet.io/docs/hello_starknet/l1l2.html?highlight=l1_handler"},(0,o.kt)("inlineCode",{parentName:"a"},"@l1_handler")),".\nIf a Cairo file is imported by a file that is already included in the contracts section, it does not need to be listed separately.\nFor example: ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="protostar.toml"',title:'"protostar.toml"'},'# ...\n[contracts]\nmain = ["./src/main.cairo"]\nproxy = ["./src/proxy.cairo"]\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Run the ",(0,o.kt)("a",{parentName:"li",href:"/docs/cli-reference#build"},(0,o.kt)("inlineCode",{parentName:"a"},"protostar build"))," command.\nThis will generate the compiled contracts in the ",(0,o.kt)("inlineCode",{parentName:"li"},"build")," directory by default.\nYou can specify a custom output directory using the ",(0,o.kt)("a",{parentName:"li",href:"/docs/cli-reference#--compiled-contracts-dir-pathbuild"},(0,o.kt)("inlineCode",{parentName:"a"},"compiled-contracts-dir"))," argument.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ protostar build --compiled-contracts-dir out\n")),(0,o.kt)("p",null,"This will create the following files in the ",(0,o.kt)("inlineCode",{parentName:"p"},"out")," directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"protostar-project\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 main.cairo\n\u2502   \u2514\u2500\u2500 proxy.cairo\n\u251c\u2500\u2500 out\n\u2502   \u251c\u2500\u2500 main.json\n\u2502   \u251c\u2500\u2500 main_abi.json\n\u2502   \u251c\u2500\u2500 proxy.json\n\u2502   \u2514\u2500\u2500 proxy_abi.json\n\u2514\u2500\u2500 protostar.toml\n")),(0,o.kt)("h2",{id:"checking-cairo-lang-version"},"Checking Cairo-lang version"),(0,o.kt)("p",null,"Protostar ships with its own version of Cairo-lang and formatter, so you don't need to set up the environment separately. You can check the version of Cairo-lang that Protostar uses to compile your project by running ",(0,o.kt)("inlineCode",{parentName:"p"},"protostar -v"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ protostar -v\nProtostar version: X.Y.Z\nCairo-lang version: A.B.C\n")))}u.isMDXComponent=!0}}]);