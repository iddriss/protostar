"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9898],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),s=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=s(t.components);return r.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),f=s(n),d=a,m=f["".concat(l,".").concat(d)]||f[d]||p[d]||o;return n?r.createElement(m,i(i({ref:e},u),{},{components:n})):r.createElement(m,i({ref:e},u))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=f;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c.mdxType="string"==typeof t?t:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7347:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return s}});var r=n(3117),a=(n(7294),n(3905));const o={},i="reflect",c={unversionedId:"tutorials/testing/cheatcodes/reflect",id:"tutorials/testing/cheatcodes/reflect",title:"reflect",description:"Loads specified Cairo object into a Python type. reflect is an instance of the Reflector object that works simillarly to ids. To retrieve the value use get() method which can return:",source:"@site/docs/tutorials/07-testing/02-cheatcodes/reflect.md",sourceDirName:"tutorials/07-testing/02-cheatcodes",slug:"/tutorials/testing/cheatcodes/reflect",permalink:"/protostar/docs/tutorials/testing/cheatcodes/reflect",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/07-testing/02-cheatcodes/reflect.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"prepare",permalink:"/protostar/docs/tutorials/testing/cheatcodes/prepare"},next:{title:"reject",permalink:"/protostar/docs/tutorials/testing/cheatcodes/reject"}},l={},s=[],u={toc:s};function p(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reflect"},(0,a.kt)("inlineCode",{parentName:"h1"},"reflect")),(0,a.kt)("p",null,"Loads specified Cairo object into a Python type. ",(0,a.kt)("inlineCode",{parentName:"p"},"reflect")," is an instance of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Reflector")," object that works simillarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"ids"),". To retrieve the value use ",(0,a.kt)("inlineCode",{parentName:"p"},"get()")," method which can return:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int")," (for felt)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RelocatableValue")," (for pointer)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CairoStruct")," (for more complex types)")),(0,a.kt)("p",null,"You can use it to print Cairo data and compare complex structures."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:"title=Printing",title:"Printing"},"%lang starknet\n\nstruct SimpleStruct {\n    x: felt,\n}\n\n@external\nfunc test_reflect_simple() {\n    alloc_locals;\n\n    local simple_struct: SimpleStruct = SimpleStruct(x=10);\n\n    %{\n        simple_struct = reflect.simple_struct.get()\n        print(simple_struct)\n        # output:\n        # CairoStruct(\n        #     x=10\n        # )\n\n        assert simple_struct.x == 10\n    %}\n\n    return ();\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:"title=Pointers",title:"Pointers"},"%lang starknet\n\nfrom starkware.cairo.common.registers import get_fp_and_pc\n\n@external\nfunc test_pointers() {\n    alloc_locals;\n\n    let (__fp__, _) = get_fp_and_pc();\n\n    local pointee: felt = 13;\n    local ptr1: felt* = &pointee;\n    local ptr2: felt* = &pointee;\n\n    %{\n        ptr1 = reflect.ptr1.get()\n        ptr2 = reflect.ptr2.get()\n\n        print(ptr1) # output: 1:8\n        print(type(ptr1)) # output: RelocatableValue\n        assert ptr1 == ptr2  # Pointers are compared directly using their addresses\n    %}\n    return ();\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:"title=Nested comparisons",title:"Nested",comparisons:!0},"%lang starknet\n\nstruct InnerStruct {\n    value: felt,\n}\n\nstruct OuterStruct {\n    inner_struct: InnerStruct,\n}\n\n@external\nfunc test_nesting() {\n    alloc_locals;\n    local inner_struct: InnerStruct = InnerStruct(value=7);\n    local outer_struct: OuterStruct = OuterStruct(inner_struct=inner_struct);\n\n    %{\n        outer_struct = reflect.outer_struct.get()\n        OuterStruct = CairoStruct #\n        InnerStruct = CairoStruct # This way you can add aliases for readability\n\n        # You can compare nested structs\n        assert outer_struct == OuterStruct(\n            inner_struct=InnerStruct(\n                value=7\n            )\n        )\n    %}\n    return ();\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:"title=Wildcards",title:"Wildcards"},"%lang starknet\n\nstruct TwoFieldStruct {\n    value1: felt,\n    value2: felt,\n}\n\n@external\nfunc test_wildcards() {\n    alloc_locals;\n    local two_field_struct: TwoFieldStruct = TwoFieldStruct(value1=23, value2=17);\n\n    %{\n        two_field_struct = reflect.two_field_struct.get()\n        assert two_field_struct == CairoStruct(\n            value1=23,\n            value2=two_field_struct.value2\n            # You can use struct members in comparison to make sure it evaluates to true\n        )\n    %}\n    return ();\n}\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Unlike ",(0,a.kt)("inlineCode",{parentName:"p"},"ids"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"reflect")," does not automatically dereference pointers. Currently you have to dereference them in Cairo.")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"reflect")," does not work for references created with ",(0,a.kt)("inlineCode",{parentName:"p"},"let"),".")))}p.isMDXComponent=!0}}]);