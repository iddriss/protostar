"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1936],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,g=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6235:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s}});var r=n(3117),a=(n(7294),n(3905));const o={sidebar_label:"Dependencies"},i="Dependencies",l={unversionedId:"legacy/dependencies-management",id:"legacy/dependencies-management",title:"Dependencies",description:"Protostar uses git submodules to manage dependencies in your project. In order to manage dependencies with Protostar, you must have git installed on your system and have the git executable added to the PATH environment variable. The PATH variable is a list of directories that your system searches for executables.",source:"@site/docs/legacy/06-dependencies-management.md",sourceDirName:"legacy",slug:"/legacy/dependencies-management",permalink:"/protostar/docs/legacy/dependencies-management",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/legacy/06-dependencies-management.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"Dependencies"},sidebar:"legacy",previous:{title:"Compilation",permalink:"/protostar/docs/legacy/compiling"},next:{title:"Testing",permalink:"/protostar/docs/legacy/testing/"}},p={},s=[{value:"Adding a dependency",id:"adding-a-dependency",level:2},{value:"External dependency reference formats",id:"external-dependency-reference-formats",level:3},{value:"Aliases",id:"aliases",level:3},{value:"Installing dependencies after cloning a repository",id:"installing-dependencies-after-cloning-a-repository",level:2},{value:"Updating dependencies",id:"updating-dependencies",level:2},{value:"Removing dependencies",id:"removing-dependencies",level:2}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dependencies"},"Dependencies"),(0,a.kt)("p",null," Protostar uses ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/book/en/v2/Git-Tools-Submodules"},"git submodules")," to manage dependencies in your project. In order to manage dependencies with Protostar, you must have git installed on your system and have the git executable added to the ",(0,a.kt)("inlineCode",{parentName:"p"},"PATH")," environment variable. The ",(0,a.kt)("inlineCode",{parentName:"p"},"PATH")," variable is a list of directories that your system searches for executables."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"As a temporary solution, Protostar is using git submodules to manage dependencies.\nWe recommend migrating your dependency management to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/scarb"},"Scarb"),".")),(0,a.kt)("h2",{id:"adding-a-dependency"},"Adding a dependency"),(0,a.kt)("p",null,"To add a dependency to your Protostar project, run the following command from the project directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"protostar install EXTERNAL_DEPENDENCY_REFERENCE\n")),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"protostar install OpenZeppelin/cairo-contracts@vX.Y.Z\n")),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"It is strongly discouraged to install the dependencies directly from the main branch, because the branch might be in unreleasable state. It is recommended to always include a tag in the ",(0,a.kt)("a",{parentName:"p",href:"#external-dependency-reference-formats"},"External Dependency Reference format"),".")),(0,a.kt)("p",null,"After running the install command, the dependency will be added by default to the ",(0,a.kt)("inlineCode",{parentName:"p"},"lib")," directory in your project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"\n.\n\u251c\u2500\u2500 lib\n\u2502   \u2514\u2500\u2500 cairo_contracts\n\u2502      \u2514\u2500\u2500 src\n\u251c\u2500\u2500 protostar.toml\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 main.cairo\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 test_main.cairo\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Protostar will create a git commit after installing a dependency.")),(0,a.kt)("p",null,"If you use a dependency that uses absolute imports, you will need to specify a ",(0,a.kt)("a",{parentName:"p",href:"/docs/cli-reference#--cairo-path-path"},(0,a.kt)("inlineCode",{parentName:"a"},"cairo-path"))," to the root directory of that dependency in your project.\nIt is recommended to specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"cairo-path")," in the configuration file, as this setting can be reused by the ",(0,a.kt)("a",{parentName:"p",href:"/docs/cli-reference#build-cairo0"},(0,a.kt)("inlineCode",{parentName:"a"},"build-cairo0"))," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/cli-reference#test-cairo0"},(0,a.kt)("inlineCode",{parentName:"a"},"test-cairo0"))," commands."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="protostar.toml"',title:'"protostar.toml"'},'[project]\nprotostar-version = "X.Y.Z"\ncairo-path = ["lib/cairo-contracts/src"]\n')),(0,a.kt)("h3",{id:"external-dependency-reference-formats"},"External dependency reference formats"),(0,a.kt)("p",null,"Protostar supports the following ways of referencing external dependency:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Format"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"GITHUB_ACCOUNT_NAME/REPO_NAME[@TAG]")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"OpenZeppelin/cairo-contracts@vX.Y.Z"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"URL_TO_THE_REPOSITORY")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"https://github.com/OpenZeppelin/cairo-contracts"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"SSH_URI")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"git@github.com:OpenZeppelin/cairo-contracts.git"))))),(0,a.kt)("h3",{id:"aliases"},"Aliases"),(0,a.kt)("p",null,"Protostar allows you to install dependencies under a different name, in case of a name conflict between two GitHub users using the same library name. To install a package under a custom name, use ",(0,a.kt)("a",{parentName:"p",href:"/docs/cli-reference#--name-string"},"name")," argument:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"protostar install EXTERNAL_DEPENDENCY_REFERENCE --name CUSTOM_NAME\n")),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"protostar install OpenZeppelin/cairo-contracts@vX.Y.Z --name open_zeppelin\n")),(0,a.kt)("h2",{id:"installing-dependencies-after-cloning-a-repository"},"Installing dependencies after cloning a repository"),(0,a.kt)("p",null,"If you ",(0,a.kt)("inlineCode",{parentName:"p"},"git clone")," a Protostar project with dependencies without using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--recurse-submodules")," flag, you will need to install the dependencies using Protostar. Otherwise, your project will not compile and tests will fail. To do this, run ",(0,a.kt)("inlineCode",{parentName:"p"},"protostar install")," in the project directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"protostar install\n")),(0,a.kt)("h2",{id:"updating-dependencies"},"Updating dependencies"),(0,a.kt)("p",null,"If the default branch of a dependency's repository uses ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/book/en/v2/Git-Basics-Tagging"},"tags"),", Protostar will update the dependency by pulling a commit marked with the newest tag. If the repository does not use tags, Protostar will pull the most recent commit from the default branch."),(0,a.kt)("p",null,"To update a single dependency, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"protostar update LOCAL_DEPENDENCY_REFERENCE/EXTERNAL_DEPENDENCY_REFERENCE\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LOCAL_DEPENDENCY_REFERENCE")," is a directory name of a dependency."),(0,a.kt)("p",null,"To update all dependencies, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"protostar update\n")),(0,a.kt)("h2",{id:"removing-dependencies"},"Removing dependencies"),(0,a.kt)("p",null,"To remove a dependency from your Protostar project, use the ",(0,a.kt)("a",{parentName:"p",href:"/docs/cli-reference#remove"},(0,a.kt)("inlineCode",{parentName:"a"},"protostar remove"))," command and specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"LOCAL_DEPENDENCY_REFERENCE")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"EXTERNAL_DEPENDENCY_REFERENCE")," of the dependency."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"protostar remove LOCAL_DEPENDENCY_REFERENCE/EXTERNAL_DEPENDENCY_REFERENCE\n")),(0,a.kt)("p",null,"For example, to remove the cairo_contracts dependency, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"protostar remove `cairo_contracts`\n")),(0,a.kt)("p",null,"This command will remove the dependency and all its associated files from your project. Protostar will also create a git commit due to reliance on git submodules."))}d.isMDXComponent=!0}}]);