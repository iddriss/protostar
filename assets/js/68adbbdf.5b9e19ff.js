"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5618],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(n),g=a,d=f["".concat(c,".").concat(g)]||f[g]||p[g]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3388:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l}});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_label:"Gas"},o="Limiting gas",s={unversionedId:"cairo-1/testing/gas",id:"cairo-1/testing/gas",title:"Limiting gas",description:"To limit gas available in a test case you can use #[available_gas(x)] attribute, replacing x with the desired limit.",source:"@site/docs/cairo-1/06-testing/03-gas.md",sourceDirName:"cairo-1/06-testing",slug:"/cairo-1/testing/gas",permalink:"/protostar/docs/cairo-1/testing/gas",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/cairo-1/06-testing/03-gas.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Gas"},sidebar:"cairo1",previous:{title:"Cheatcodes",permalink:"/protostar/docs/cairo-1/testing/cheatcodes"},next:{title:"Debugging",permalink:"/protostar/docs/cairo-1/testing/debugging"}},c={},l=[],u={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"limiting-gas"},"Limiting gas"),(0,a.kt)("p",null,"To limit gas available in a test case you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"#[available_gas(x)]")," attribute, replacing ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," with the desired limit."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"use array::ArrayTrait;\n\nfn fib(a: felt252, b: felt252, n: felt252) -> felt252 {\n    match gas::withdraw_gas() {\n        Option::Some(_) => {},\n        Option::None(_) => {\n            let mut data = ArrayTrait::new();\n            data.append('Out of gas');\n            panic(data);\n        }\n    }\n\n    match n {\n        0 => a,\n        _ => fib(b, a + b, n - 1),\n    }\n}\n\n\n// With no decorator gas is unlimited\n#[test]\nfn test_unlimited_gas() {\n    assert(fib(0, 1, 10) == 55, 'invalid result');\n}\n\n\n// This test will pass\n#[test]\n#[available_gas(100000)]\nfn test_enough_gas() {\n    assert(fib(0, 1, 10) == 55, 'invalid result');\n}\n\n\n// This test will fail, due to not enough gas\n#[test]\n#[available_gas(1)]\nfn test_not_enough_gas() {\n    assert(fib(0, 1, 10) == 55, 'invalid result');\n}\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"All cheatcodes have cost ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," so validating gas cost makes sense only for ",(0,a.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/unit-testing"},"unit tests"),".")))}p.isMDXComponent=!0}}]);