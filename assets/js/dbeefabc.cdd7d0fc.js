"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5431],{3905:function(t,e,r){r.d(e,{Zo:function(){return p},kt:function(){return f}});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function s(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?s(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},s=Object.keys(t);for(n=0;n<s.length;n++)r=s[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(n=0;n<s.length;n++)r=s[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var l=n.createContext({}),i=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):c(c({},e),t)),r},p=function(t){var e=i(t.components);return n.createElement(l.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,s=t.originalType,l=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),u=i(r),f=a,k=u["".concat(l,".").concat(f)]||u[f]||d[f]||s;return r?n.createElement(k,c(c({ref:e},p),{},{components:r})):n.createElement(k,c({ref:e},p))}));function f(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var s=r.length,c=new Array(s);c[0]=u;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o.mdxType="string"==typeof t?t:a,c[1]=o;for(var i=2;i<s;i++)c[i]=r[i];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6237:function(t,e,r){r.r(e),r.d(e,{assets:function(){return l},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return i}});var n=r(3117),a=(r(7294),r(3905));const s={},c="start_prank",o={unversionedId:"tutorials/testing/cheatcodes/start-prank",id:"tutorials/testing/cheatcodes/start-prank",title:"start_prank",description:"Changes a caller address returned by getcalleraddress() until the returned callable is called. If targetcontractaddress is specified, startprank affects only the contract with the specified address. Otherwise, startprank affects the current contract.",source:"@site/docs/tutorials/07-testing/02-cheatcodes/start-prank.md",sourceDirName:"tutorials/07-testing/02-cheatcodes",slug:"/tutorials/testing/cheatcodes/start-prank",permalink:"/protostar/docs/tutorials/testing/cheatcodes/start-prank",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/07-testing/02-cheatcodes/start-prank.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorials",previous:{title:"skip",permalink:"/protostar/docs/tutorials/testing/cheatcodes/skip"},next:{title:"store",permalink:"/protostar/docs/tutorials/testing/cheatcodes/store"}},l={},i=[{value:"In unit tests",id:"in-unit-tests",level:2},{value:"In integration tests",id:"in-integration-tests",level:2}],p={toc:i};function d(t){let{components:e,...r}=t;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"start_prank"},(0,a.kt)("inlineCode",{parentName:"h1"},"start_prank")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def start_prank(caller_address: int, target_contract_address: Optional[int] = None) -> Callable: ...\n")),(0,a.kt)("p",null,"Changes a caller address returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"get_caller_address()")," until the returned callable is called. If ",(0,a.kt)("inlineCode",{parentName:"p"},"target_contract_address")," is specified, ",(0,a.kt)("inlineCode",{parentName:"p"},"start_prank")," affects only the contract with the specified address. Otherwise, ",(0,a.kt)("inlineCode",{parentName:"p"},"start_prank")," affects the current contract."),(0,a.kt)("h2",{id:"in-unit-tests"},"In unit tests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Local assert passes"',title:'"Local',assert:!0,'passes"':!0},"@external\nfunc test_remote_prank{syscall_ptr: felt*, range_check_ptr}() {\n    %{ stop_prank_callable = start_prank(123) %}\n\n    let (caller_addr) = get_caller_address();\n    // Does not raise error\n    assert caller_addr = 123;\n\n    %{ stop_prank_callable() %}\n    return ();\n}\n")),(0,a.kt)("h2",{id:"in-integration-tests"},"In integration tests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./pranked_contract.cairo"',title:'"./pranked_contract.cairo"'},'%lang starknet\n\nfrom starkware.starknet.common.syscalls import get_caller_address\n\n@external\nfunc assert_pranked{syscall_ptr: felt*}() {\n    let (caller_addr) = get_caller_address();\n    with_attr error_message("Not pranked!") {\n        assert caller_addr = 123;\n    }\n    return ();\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Remote assert passes"',title:'"Remote',assert:!0,'passes"':!0},'@contract_interface\nnamespace Pranked {\n    func assert_pranked() -> () {\n    }\n}\n\n@external\nfunc test_remote_prank{syscall_ptr: felt*, range_check_ptr}() {\n    alloc_locals;\n    local contract_address: felt;\n    %{\n        ids.contract_address = deploy_contract("./pranked_contract.cairo").contract_address\n        stop_prank_callable = start_prank(123, target_contract_address=ids.contract_address)\n    %}\n    // Does not raise error\n    Pranked.assert_pranked(contract_address=contract_address);\n    %{ stop_prank_callable() %}\n    return ();\n}\n')))}d.isMDXComponent=!0}}]);