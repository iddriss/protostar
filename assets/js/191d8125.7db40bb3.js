"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6128],{3905:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=r.createContext({}),p=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},s=function(t){var e=p(t.components);return r.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,c=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),m=p(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,i(i({ref:e},s),{},{components:n})):r.createElement(f,i({ref:e},s))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l.mdxType="string"==typeof t?t:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3139:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var r=n(3117),o=(n(7294),n(3905));const a={sidebar_label:"Compilation"},i="Project compilation",l={unversionedId:"tutorials/compiling",id:"tutorials/compiling",title:"Project compilation",description:"In order to compile your project:",source:"@site/docs/tutorials/05-compiling.md",sourceDirName:"tutorials",slug:"/tutorials/compiling",permalink:"/protostar/docs/tutorials/compiling",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/tutorials/05-compiling.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Compilation"},sidebar:"tutorials",previous:{title:"Configuration file",permalink:"/protostar/docs/tutorials/configuration-file"},next:{title:"Dependencies",permalink:"/protostar/docs/tutorials/dependencies-management"}},c={},p=[{value:"Entrypoint",id:"entrypoint",level:3},{value:"Contract name",id:"contract-name",level:3},{value:"Output directory",id:"output-directory",level:3},{value:"Cairo-lang version",id:"cairo-lang-version",level:3},{value:"Additional source directories",id:"additional-source-directories",level:3}],s={toc:p};function u(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"project-compilation"},"Project compilation"),(0,o.kt)("p",null,"In order to compile your project:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Specify contracts and their files in ",(0,o.kt)("inlineCode",{parentName:"li"},"protostar.toml"),"."),(0,o.kt)("li",{parentName:"ol"},"Run ",(0,o.kt)("inlineCode",{parentName:"li"},"protostar build"),".")),(0,o.kt)("h1",{id:"specifying-contracts-and-their-files"},"Specifying contracts and their files"),(0,o.kt)("p",null,"Protostar needs to know how to generate contracts from Cairo files. Each Cairo file that contains an ",(0,o.kt)("a",{parentName:"p",href:"#entrypoint"},"entrypoint")," should be included in the ",(0,o.kt)("inlineCode",{parentName:"p"},'"protostar.contracts"')," section of the configuration file."),(0,o.kt)("p",null,"For example, the following configuration tells Protostar to generate two contracts \u2014 'foo' and 'bar'."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="protostar.toml"',title:'"protostar.toml"'},'# ...\n\n["protostar.contracts"]\nfoo = [\n    "./src/main.cairo",\n]\nbar = [\n    "./src/main.cairo",\n]\n')),(0,o.kt)("h3",{id:"entrypoint"},"Entrypoint"),(0,o.kt)("p",null,"An entrypoint is a function decorated with one of the following decorators:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://starknet.io/docs/hello_starknet/constructors.html"},(0,o.kt)("inlineCode",{parentName:"a"},"@constructor"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://starknet.io/docs/hello_starknet/intro.html"},(0,o.kt)("inlineCode",{parentName:"a"},"@external"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://starknet.io/docs/hello_starknet/intro.html"},(0,o.kt)("inlineCode",{parentName:"a"},"@view"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://starknet.io/docs/hello_starknet/l1l2.html?highlight=l1_handler"},(0,o.kt)("inlineCode",{parentName:"a"},"@l1_handler")))),(0,o.kt)("h3",{id:"contract-name"},"Contract name"),(0,o.kt)("p",null,"A contract name refers to an attribute name in this ",(0,o.kt)("inlineCode",{parentName:"p"},"\u201cprotostar.contracts\u201d")," section of the configuration file. You can use contract name as a reference to a contract in some Protostar features. In the example above, ",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bar")," are contract names."),(0,o.kt)("h1",{id:"compiling-your-project"},"Compiling your project"),(0,o.kt)("p",null,"Once you specified contract configurations, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ protostar build\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="A compilation result."',title:'"A',compilation:!0,'result."':!0},"$ ls ./build\nbar.json     bar_abi.json foo.json     foo_abi.json\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Protostar detects account contracts. Unlike ",(0,o.kt)("inlineCode",{parentName:"p"},"starknet-compile"),", you don't have to provide ",(0,o.kt)("inlineCode",{parentName:"p"},"--account_contract")," flag to compile them.")),(0,o.kt)("h3",{id:"output-directory"},"Output directory"),(0,o.kt)("p",null,"By default, Protostar uses a ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," directory as a compilation destination. However, you can specify a custom directory by running ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," command with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--output")," flag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"protostar build --output out\n")),(0,o.kt)("h3",{id:"cairo-lang-version"},"Cairo-lang version"),(0,o.kt)("p",null,"Protostar ships with its own ",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/cairo-lang/"},"cairo-lang")," and ",(0,o.kt)("a",{parentName:"p",href:"/protostar/docs/tutorials/formatting"},"formatter"),". You don't have to ",(0,o.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/quickstart.html"},"set up the environment"),". If you want to check what Cairo version Protostar uses to compile your project, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="$ protostar -v"',title:'"$',protostar:!0,'-v"':!0},"Protostar version: 0.1.0\nCairo-lang version: 0.8.0\n")),(0,o.kt)("h3",{id:"additional-source-directories"},"Additional source directories"),(0,o.kt)("p",null,"You can specify additional import search path by using ",(0,o.kt)("inlineCode",{parentName:"p"},"--cairo-path")," flag."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ protostar build --cairo-path=modules cairo_libs\n")))}u.isMDXComponent=!0}}]);