"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6187],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,c(c({ref:t},p),{},{components:n})):r.createElement(f,c({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2434:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return l}});var r=n(3117),a=(n(7294),n(3905));const o={},c="store",i={unversionedId:"legacy/testing/cheatcodes/store",id:"legacy/testing/cheatcodes/store",title:"store",description:"Updates storage variable with name variablename and given key to value of a contract with targetcontract_address.",source:"@site/docs/legacy/07-testing/02-cheatcodes/store.md",sourceDirName:"legacy/07-testing/02-cheatcodes",slug:"/legacy/testing/cheatcodes/store",permalink:"/protostar/docs/legacy/testing/cheatcodes/store",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/legacy/07-testing/02-cheatcodes/store.md",tags:[],version:"current",frontMatter:{},sidebar:"legacy",previous:{title:"start_prank",permalink:"/protostar/docs/legacy/testing/cheatcodes/start-prank"},next:{title:"strategy",permalink:"/protostar/docs/legacy/testing/cheatcodes/strategy"}},s={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"store"},(0,a.kt)("inlineCode",{parentName:"h1"},"store")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def store(target_contract_address: int, variable_name: str, value: List[int], key: Optional[List[int]] = None):\n")),(0,a.kt)("p",null,"Updates storage variable with name ",(0,a.kt)("inlineCode",{parentName:"p"},"variable_name")," and given key to ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," of a contract with ",(0,a.kt)("inlineCode",{parentName:"p"},"target_contract_address"),".\nExample:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./src/contract.cairo"',title:'"./src/contract.cairo"'},"%lang starknet\n\nfrom starkware.cairo.common.cairo_builtins import HashBuiltin\nfrom starkware.starknet.common.syscalls import get_block_number\n\nstruct Value {\n    a: felt,\n    b: felt,\n}\n\n@storage_var\nfunc store_val(a: felt, b: felt) -> (res: Value) {\n}\n\n@view\nfunc get_value{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(\n    a: felt, b: felt\n) -> (res: Value) {\n    let (val) = store_val.read(a, b);\n    return (val,);\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="./test/test_store.cairo"',title:'"./test/test_store.cairo"'},'%lang starknet\nfrom starkware.cairo.common.cairo_builtins import HashBuiltin\nfrom src.contract import Value\n\n@contract_interface\nnamespace Contract {\n    func get_value(a: felt, b: felt) -> (res: Value) {\n    }\n}\n\n@external\nfunc test_store{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}() {\n    alloc_locals;\n    local contract_address;\n\n    %{\n        ids.contract_address = deploy_contract("./src/contract.cairo").contract_address\n        store(ids.contract_address, "store_val", [4, 3], key=[1,2])\n    %}\n\n    let (bn) = Contract.get_value(contract_address, 1, 2);\n\n    assert 4 = bn.a;\n    assert 3 = bn.b;\n    return ();\n}\n')),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"You have to provide ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," as list of ints. In the future, Data Transformer will be supported.")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"There is no type checking for ",(0,a.kt)("inlineCode",{parentName:"p"},"variable_name"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"value"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),", make sure you provided values correctly.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"key")," is a list of arguments because Cairo ",(0,a.kt)("inlineCode",{parentName:"p"},"@storage_var")," maps any number of felt arguments to any number of felt values.")))}u.isMDXComponent=!0}}]);