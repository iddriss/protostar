"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6377],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=c(r),d=a,f=g["".concat(u,".").concat(d)]||g[d]||l[d]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=g;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},2251:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return l},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var n=r(3117),a=(r(7294),r(3905));const i={sidebar_label:"Debugging"},o="Debugging",s={unversionedId:"cairo-1/testing/debugging",id:"cairo-1/testing/debugging",title:"Debugging",description:"Currently, Cairo does not support a debugging mechanism per se, but we can print variables' values to the standard output.",source:"@site/docs/cairo-1/05-testing/04-debugging.md",sourceDirName:"cairo-1/05-testing",slug:"/cairo-1/testing/debugging",permalink:"/protostar/docs/cairo-1/testing/debugging",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/cairo-1/05-testing/04-debugging.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Debugging"},sidebar:"cairo1",previous:{title:"Gas",permalink:"/protostar/docs/cairo-1/testing/gas"},next:{title:"End-to-end tests",permalink:"/protostar/docs/cairo-1/testing/e2e"}},u={},c=[],p={toc:c};function l(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"debugging"},"Debugging"),(0,a.kt)("p",null,"Currently, Cairo does not support a debugging mechanism per se, but we can print variables' values to the standard output."),(0,a.kt)("h1",{id:"printing-to-stdout"},"Printing to stdout"),(0,a.kt)("p",null,"In order to print a variable's value to the standard output, we have to use ",(0,a.kt)("inlineCode",{parentName:"p"},"PrintTrait"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"use array::ArrayTrait;\nuse protostar_print::PrintTrait;\nuse result::ResultTrait;\n\n#[test]\nfn test_print_basic() {\n  1.print();\n\n  'hello'.print();\n\n  let mut array = ArrayTrait::new();\n  array.append('veni');\n  array.append('vidi');\n  array.append('vici');\n  array.print();\n\n  (1 == 2).print();\n\n  true.print();\n\n  assert(1 == 1, 'xxx');\n}\n")),(0,a.kt)("p",null,"You can print numbers, booleans and ",(0,a.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/how_cairo_works/consts.html#short-string-literals"},"Cairo short strings")," as well as arrays containing values of these types."))}l.isMDXComponent=!0}}]);