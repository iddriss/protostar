"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2755],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},s=Object.keys(t);for(r=0;r<s.length;r++)n=s[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(r=0;r<s.length;r++)n=s[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var l=r.createContext({}),u=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},c=function(t){var e=u(t.components);return r.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,s=t.originalType,l=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),f=u(n),d=i,m=f["".concat(l,".").concat(d)]||f[d]||p[d]||s;return n?r.createElement(m,a(a({ref:e},c),{},{components:n})):r.createElement(m,a({ref:e},c))}));function d(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var s=n.length,a=new Array(s);a[0]=f;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o.mdxType="string"==typeof t?t:i,a[1]=o;for(var u=2;u<s;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1544:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return u}});var r=n(3117),i=(n(7294),n(3905));const s={sidebar_label:"Unit testing"},a="Unit testing",o={unversionedId:"cairo-1/testing/unit-testing",id:"cairo-1/testing/unit-testing",title:"Unit testing",description:"Protostar lets you test standalone cairo functions. This technique is referred to as unit testing. You should write as many unit tests as possible as these are much faster than integration tests.",source:"@site/docs/cairo-1/05-testing/01-unit-testing.md",sourceDirName:"cairo-1/05-testing",slug:"/cairo-1/testing/unit-testing",permalink:"/protostar/docs/cairo-1/testing/unit-testing",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/cairo-1/05-testing/01-unit-testing.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Unit testing"},sidebar:"cairo1",previous:{title:"Testing",permalink:"/protostar/docs/cairo-1/testing/"},next:{title:"Integration testing",permalink:"/protostar/docs/cairo-1/testing/integration-testing"}},l={},u=[{value:"Writing your first test",id:"writing-your-first-test",level:2},{value:"Test collecting",id:"test-collecting",level:2},{value:"Failing tests",id:"failing-tests",level:2}],c={toc:u};function p(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"unit-testing"},"Unit testing"),(0,i.kt)("p",null,"Protostar lets you test standalone cairo functions. This technique is referred to as unit testing. You should write as many unit tests as possible as these are ",(0,i.kt)("strong",{parentName:"p"},"much faster")," than ",(0,i.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/integration-testing"},"integration tests"),"."),(0,i.kt)("h2",{id:"writing-your-first-test"},"Writing your first test"),(0,i.kt)("p",null,"First, add the following code to the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/lib.cairo")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"fn sum(a: felt252, b: felt252) -> felt252 {\n    return a + b;\n}\n")),(0,i.kt)("p",null,"Now, let's test this function. Create a file ",(0,i.kt)("inlineCode",{parentName:"p"},"tests/test_sum.cairo"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"use your_project_name::sum;\n\n#[test]\nfn test_sum() {\n    assert(sum(2, 3) == 5, 'sum incorrect');\n}\n")),(0,i.kt)("p",null,"Now run your test using this command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"protostar test ./tests\n")),(0,i.kt)("p",null,"You should see something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Collected 2 suites, and 3 test cases (10.64)\n[PASS] tests/test_sum.cairo test_sum (time=0.00s)\nTest suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSeed:        2752673895\n17:20:43 [INFO] Execution time: 5.0 s\n")),(0,i.kt)("h2",{id:"test-collecting"},"Test collecting"),(0,i.kt)("p",null,"Protostar collects all test suites specified under the path passed as an argument. You can pass either directory or a specific file. A test suite is every ",(0,i.kt)("inlineCode",{parentName:"p"},".cairo")," file with a name starting from ",(0,i.kt)("inlineCode",{parentName:"p"},"test_")," or ending with ",(0,i.kt)("inlineCode",{parentName:"p"},"_test"),". Protostar considers as a test case each function, inside a test suite, with ",(0,i.kt)("inlineCode",{parentName:"p"},"#[test]")," attribute."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Test cases cannot return any values and cannot take any arguments.")),(0,i.kt)("h2",{id:"failing-tests"},"Failing tests"),(0,i.kt)("p",null,"Your tests fail when code ",(0,i.kt)("em",{parentName:"p"},"panics"),". To write a test that fails, you will need to use ",(0,i.kt)("inlineCode",{parentName:"p"},"panic")," function, here's how you do it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"use array::ArrayTrait;\n\n// Single value in the panic payload\n#[test]\nfn test_panic_single_value() {\n    let mut data = ArrayTrait::new();\n    data.append('this one should fail');\n    panic(data)\n}\n")),(0,i.kt)("p",null,"Of course, if any of the functions you call from tests will ",(0,i.kt)("em",{parentName:"p"},"panic"),", your test will fail as well."))}p.isMDXComponent=!0}}]);